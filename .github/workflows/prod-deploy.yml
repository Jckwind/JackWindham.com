# Prod-Deploy: A GitHub Actions workflow for Prod Environment
name: Prod-Deploy

# Trigger deployment only on merge from pull request to main branch
on:
  pull_request:
    branches:
      - main
    types:
      - closed

concurrency:
  group: jackwindham.com
  cancel-in-progress: true

env:
  TARGET_DIRECTORY: /home/ec2-user/prod
  WEBSITE_URL: https://jackwindham.com
  WEBSITE_URL_HTTP: http://jackwindham.com
  AWS_DEFAULT_REGION: us-east-1
  PORT: 3000

jobs:
  Prod-Deployment:
    if: github.event.pull_request.merged == true
    name: Update website code in the Prod env
    runs-on: ubuntu-latest

    steps:
    # Fetch GitHub action IP for temporary whitelisting
    - name: Get Github action IP
      id: ip
      run: |
        set -e
        response=$(curl -s http://checkip.amazonaws.com/)
        echo "ip=$response" >> "$GITHUB_ENV"

    # Set global environment variables
    - name: Setting environment variables..
      run: |
        echo "AWS_SG_ID=${{ secrets.AWS_SG_ID }}" >> $GITHUB_ENV
    
    # Temporarily add GitHub Actions runner IP to the AWS security group
    - name: Add Github Actions IP to Security group
      if: env.ip != ''
      run: |
        aws ec2 authorize-security-group-ingress \
            --group-id ${{ env.AWS_SG_ID }} \
            --protocol tcp \
            --port 22 \
            --cidr ${{ env.ip }}/32 \
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_DEFAULT_REGION: ${{ env.AWS_DEFAULT_REGION }}
    
    # Logic for stopping the Next.js frontend
    - name: Stop Next.js frontend (Prod)
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.HOST_DNS }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          set -e
          if [ -d "prod/frontend" ]; then
            cd prod/frontend
            if pm2 describe "website" > /dev/null; then
              pm2 delete "website"
              pm2 save
            else
              echo "PM2 process 'website' not found, skipping."
            fi
            if lsof -i :${{ env.PORT }} -sTCP:LISTEN; then
              sudo fuser -k ${{ env.PORT }}/tcp
            fi
          else
            echo "Directory prod/frontend not found, skipping."
          fi

    # Checkout the latest code from the repository
    - name: Checkout new code
      uses: actions/checkout@v2

    # Deploy the new code to the Prod environment on EC2
    - name: Deploy to EC2 (Prod)
      uses: easingthemes/ssh-deploy@v4.1.8
      env:
        SSH_PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}
        REMOTE_HOST: ${{ secrets.HOST_DNS }}
        REMOTE_USER: ${{ secrets.USERNAME }}
        TARGET: ${{ env.TARGET_DIRECTORY }}

    # Install dependencies for the Next.js frontend in the Prod environment
    - name: Install Next.js frontend dependencies (Prod)
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.HOST_DNS }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          set -e
          if [ -d "prod/frontend" ]; then
            cd prod/frontend
            npm ci
          else
            echo "Directory prod/frontend not found, skipping dependency installation."
          fi

    # Build the Next.js frontend in the Prod environment
    - name: Build Next.js frontend (Prod)
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.HOST_DNS }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          set -e
          if [ -d "prod/frontend" ]; then
            cd prod/frontend
            npm run build
          else
            echo "Directory prod/frontend not found, skipping build process."
          fi

    # Start the Next.js frontend in the Prod environment
    - name: Start Next.js frontend (Prod)
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.HOST_DNS }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          set -e
          if [ -d "prod/frontend" ]; then
            cd prod/frontend
            if ! pm2 describe "website" > /dev/null; then
              pm2 start npm --name "website" -- start -- --port ${{ env.PORT }}
              pm2 save
            else
              echo "PM2 process 'website' already running, skipping start command."
            fi
          else
            echo "Directory prod/frontend not found, skipping start process."
          fi

    # Reload the Nginx configuration in the Prod environment
    - name: Reload Nginx Configuration (Prod)
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.HOST_DNS }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          set -e
          if sudo nginx -t; then
            sudo nginx -s reload
          else
            echo "Nginx configuration test failed, skipping reload."
          fi
    
    # Revoke the temporary IP authorization from the AWS security group
    - name: Remove Github Actions IP from security group
      if: always() && env.ip != ''
      run: |
        aws ec2 revoke-security-group-ingress \
            --group-id ${{ env.AWS_SG_ID }} \
            --protocol tcp \
            --port 22 \
            --cidr ${{ env.ip }}/32 \
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_DEFAULT_REGION: ${{ env.AWS_DEFAULT_REGION }}
  
    # Perform health check on the deployed service URLs to ensure they are accessible.
    - name: Check the deployed service (Prod)
      uses: jtalk/url-health-check-action@v3
      if: success()
      with:
        url: ${{ env.WEBSITE_URL }}|${{ env.WEBSITE_URL_HTTP }}
        max-attempts: 3
        retry-delay: 5s
